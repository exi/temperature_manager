#!/usr/bin/env python3

# This is a small python utility to better control the fan speeds of my
# asrock rack C2550D4I mainboard.
# If you want to use this, you have to make some modifications for your use.
# The Metric class takes a metric_fn as an argument which you have to change
# to fit your use case.
# You can use get_sys_temp to control on the Motherboard temperature. This is usually higher than the CPU temp.
# You can use get_cpu_temp to control on the CPU temperature.
# You can use smart_temp() to control on HDD temperature.
#
# The control code will monitor each metric.
# If one metric moves up, we compute where in the min<->max temp range the current temperature is and adjust the fan
# speeds by taking a fan speed that is at the same point in the min<->max fan speed range.
# If no metric moves upwards, we reduce the fan speed by FAN_DOWN_TICK steps every 30 seconds.
# If a metric moves over the max limit, we turn all fans to full speed and keep them there for 2 minutes.
from subprocess import Popen, PIPE

from collections import namedtuple
import time
from enum import Enum
import logging
import re
import csv

FAN_VALUES = [hex(n) for n in range(4, 101)]
STARTING_FAN_SPEED = int(len(FAN_VALUES) / 2)
FAN_DOWN_TICK = 2
OVER_LIMIT_EXTRA_DELAY_SEC = 60 * 2

LOG_FILE = 'temperature_manager.log'
STATS_FILE_TEMPLATE = 'temperature_manager_stats_%s.csv'
LOAD_FILE = '/proc/loadavg'

LOGGER = logging.getLogger('temperature_manager')
LOGGER.setLevel(logging.DEBUG)
fh = logging.FileHandler(LOG_FILE)
fh.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter)
ch.setFormatter(formatter)
LOGGER.addHandler(fh)
LOGGER.addHandler(ch)

class Direction(Enum):
    UP = 1
    DOWN = 2
    STABLE = 3

class StatsWriter():
    def __init__(self, filename, metrics, fan_speed_fn, load_fn):
        self.file = open(filename, 'w', newline='')
        self.writer = csv.writer(self.file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
        self.metrics = sorted(metrics, key=lambda m: m.get_name())
        self.writer.writerow(['timestamp', 'fanspeed', 'load'] + [m.get_name() for m in self.metrics])
        self.fan_speed_fn = fan_speed_fn
        self.load_fn = load_fn

    def update(self):
        self.writer.writerow(
                [int(time.time())] +
                [int(FAN_VALUES[self.fan_speed_fn()], 0), str(self.load_fn())] +
                [m.get_current() for m in self.metrics])
        self.file.flush()

class Metric:
    def __init__(self, name, metric_fn, normal_temp, temp_limit):
        self.name = name
        self.metric_fn = metric_fn
        self.temp_limit = temp_limit
        self.prev_value = metric_fn()
        self.cur_value = metric_fn()
        self.normal_temp = normal_temp

    def refresh(self):
        self.prev_value = self.cur_value
        self.cur_value = self.metric_fn()

    def is_over_or_at_limit(self):
        return self.cur_value >= self.temp_limit

    def get_direction(self):
        if self.cur_value == self.prev_value:
            return Direction.STABLE
        if self.cur_value > self.prev_value:
            return Direction.UP
        if self.cur_value < self.prev_value:
            return Direction.DOWN

    def get_limit(self):
        return self.temp_limit

    def get_current(self):
        return self.cur_value

    def get_normal(self):
        return self.normal_temp

    def get_name(self):
        return self.name

def smart_temp(device):
    def fn():
        p = Popen(['smartctl', '-A', device], stdout=PIPE, stderr=PIPE)
        stdout, _ = p.communicate()
        lines = stdout.decode('UTF-8').splitlines()
        for l in lines:
            # 194 is the ID# of Temperature_Celsius
            if not l.startswith('194'):
                continue
            parts = [part.strip() for part in re.split('\s+', l)]
            # Element number 10 in the line contains the temperature
            return float(parts[9])
        raise Exception('Failed to get %s temp' % device)
    return fn

def get_sys_temp():
    p = Popen(['ipmitool', 'sensor'], stdout=PIPE, stderr=PIPE)
    stdout, _ = p.communicate()
    lines = stdout.decode('UTF-8').splitlines()
    for l in lines:
        if not l.startswith('MB Temperature'):
            continue
        parts = [part.strip() for part in l.split(' | ')]
        # Element number 2 in the line contains the temperature
        return float(parts[1])
    raise Exception('Failed to get sys temp')

def get_cpu_temp():
    p = Popen(['ipmitool', 'sensor'], stdout=PIPE, stderr=PIPE)
    stdout, _ = p.communicate()
    lines = stdout.decode('UTF-8').splitlines()
    for l in lines:
        if not l.startswith('CPU Temperature'):
            continue
        parts = [part.strip() for part in l.split(' | ')]
        # Element number 2 in the line contains the temperature
        return float(parts[1])
    raise Exception('Failed to get sys temp')

def set_fans(val):
    LOGGER.info('setting fans to %s' % val)
    p = Popen(['ipmitool', 'raw', '0x3a' ,'0x01' ,val ,val ,val ,val ,val ,val ,'0x00' ,'0x00'] , stdout=PIPE, stderr=PIPE)
    p.communicate()

def get_load_avg():
    with open(LOAD_FILE, 'r') as f:
        line = f.readline()
        parts = line.split(' ')
        return float(parts[0])

def control():
    metrics = [
        Metric('sda', smart_temp('/dev/sda'), 35, 44),
        Metric('sdb', smart_temp('/dev/sdb'), 35, 44),
        Metric('sdc', smart_temp('/dev/sdc'), 35, 44),
        Metric('sdd', smart_temp('/dev/sdd'), 35, 44),
        Metric('sde', smart_temp('/dev/sde'), 35, 44),
        Metric('sdf', smart_temp('/dev/sdf'), 35, 44),
        Metric('sdg', smart_temp('/dev/sdg'), 35, 44),
        Metric('SYS', get_sys_temp, 50, 65),
        Metric('CPU', get_cpu_temp, 35, 65),
    ]
    fan_speed = STARTING_FAN_SPEED
    stats_writer = StatsWriter(
            STATS_FILE_TEMPLATE % int(time.time()),
            metrics,
            lambda: fan_speed,
            get_load_avg)

    max_fan_speed = len(FAN_VALUES) - 1
    min_fan_speed = 0
    while True:
        any_up = False
        over_limit = False
        extra_delay = 0
        max_ratio = float(0)
        for m in metrics:
            m.refresh()
            d = m.get_direction()
            if d == Direction.UP:
                LOGGER.info('%s went up' % m.get_name())
                any_up = True
            if m.is_over_or_at_limit():
                LOGGER.info('%s is over limit' % m.get_name())
                over_limit = True
            ratio = (m.get_current() - m.get_normal()) / (m.get_limit() - m.get_normal())
            if ratio > max_ratio:
                LOGGER.info('new max ratio: %s %s' % (m.get_name(), ratio))
                max_ratio = ratio

        max_ratio = min(1, max_ratio)
        max_ratio = max(0, max_ratio)
        LOGGER.info('max_ratio: %s' % max_ratio)
        stats_writer.update()

        if over_limit:
            fan_speed = len(FAN_VALUES) - 1
            extra_delay = OVER_LIMIT_EXTRA_DELAY_SEC
        elif any_up:
            fan_speed = min(int(max_fan_speed * max_ratio), max_fan_speed)
        else:
            fan_speed = max(fan_speed - FAN_DOWN_TICK, min_fan_speed)
        set_fans(FAN_VALUES[fan_speed])
        time.sleep(30 + extra_delay)


if __name__ == '__main__':
    control()
